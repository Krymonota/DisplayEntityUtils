########################
# Display Entity Utils #
#      By DonnyPZ      #
########################

localStorageEnabled: true

#The database and collections will automatically be created if it does not exist already
mongodb:
  enabled: false
  connectionString: ""
  database: "DisplayEntityUtils"
  groupCollection: "saved_displays"
  animationCollection: "saved_animations"

mysql:
  enabled: false
  host: "localhost"
  port: 3306
  database: "mydb"
  username: "root"
  password: "password"
  useSSL: false
#Using connection url will override settings above
  connectionURL: ""

#Determine whether the seed used to generate random part uuids should stay consistent with every group
#This is useful when wanting to use the same animation on different groups

# Merging groups will change the partUUIDS of the parts from the group merging in
# May potentially lead to unexpected outcomes when animating

#This feature can also be disabled and the command "/mdis parts randomizeuuids <seed>" can be used instead
seededPartUUIDs: true


#Automatically select groups when using the command "/mdis group spawn"
autoSelectGroups: false

#Attempts to automatically detect Spawned Display Entity Groups on Server Start
#Also attempts to asynchronously detect groups when a chunk loads
#This feature may not work 100% work on worlds that keep spawn in memory, but will work after a world reload (unload -> load)
automaticGroupDetection:
  enabled: true

  #Maximum Range to Search for Interaction Entities in a Group
  #High values with frequent searches may lead to lag spikes
  #This will not work if (automaticGroupDetection is false)
  #Setting this value to 0 will effectively disable this feature
  maximumInteractionSearchRange: 7

  #Re-search previously searched chunks for Spawned Display Entity Groups
  #May cause lag when if many chunks are constantly being loaded and unloaded
  #May cause lag in chunks with many entities
  readSameChunks: false

  #Unregisters all groups in unloaded worlds
  #
  #Keep this enabled unless another plugin requires this setting to be disabled, or
  #if problems arise with this setting while using the API
  unregisterOnUnload:
    enabled: true
    worlds:
      - world
      - lobby

  #If true, groups in the listed worlds will not be unregistered
  #If false, groups in the listed worlds will be unregistered
    blacklist: true

#Automatically Pivot Interaction Entity when a DisplayEntityGroup is spawned
#in order to match the group's yaw
autoPivotInteractionsOnSpawn: true

#Enable this to allow overwriting of existing saved DisplayEntityGroups and Animations
overwriteExistingSaves: true


#This setting attempts to automatically cull Spawned Display Entity Groups based on the following options:
#
#    NONE: No Display Entities will be culled (Default Vanilla Option)
#    LOCAL: Display Entities will be culled individually based on their transformation's scale
#    LARGEST: All Display Entities within a group will have the same culling size as the largest culled entity in the group
#
#Use this setting at your own risk and ONLY if you know what you are doing.
#This may have client performance benefits for players when selecting the correct option for your server.
#LARGEST is the safest option to reduce Display Entities being culled too early, but may cause performance issues in areas with many display entities.
# !KEEP IN MIND! it is NOT possible for the culling to be perfect.
autoCulling: NONE

#The two settings below will add X amount of blocks to the culling range of all SpawnedDisplayEntityGroups
#If a group's culling width/height is 0 on the width and height, the group's culling width/height will become whatever value you set below
#Essentially, the value set below will be added to the group's culling width/height
#
#These settings will do nothing if "autoCulling" is set to NONE
#ONLY CHANGE THESE SETTINGS IF YOU KNOW WHAT YOU ARE DOING
widthCullingAdder: 1.5
heightCullingAdder: 1.5


#This setting automatically caches animations. Keep this enabled if SpawnedEntityGroups use animations when they spawn and
#those animations are saved on a database like MongoDB or MySQL. This will help prevent server lag/freezes, but also takes up
#more memory.
cacheAnimations: true

#Attempt to improve server performance by playing animations asynchronously
#Keep this value as false if animations do not display as intended or are choppy
asynchronousAnimations: false




